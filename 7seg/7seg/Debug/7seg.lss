
7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000252  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000281  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b5d  00000000  00000000  000002b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000084a  00000000  00000000  00000e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002dc  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00001934  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000b3  00000000  00000000  00001bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001ba  000001ba  0000024e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  0000018e  0000018e  00000222  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.display 00000024  0000016a  0000016a  000001fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000074  000000f6  000000f6  0000018a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .progmemx.data.NUMBERS 0000000b  000000ea  000000ea  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 17 .bss.numberIndex 00000002  00800100  00800100  00000252  2**0
                  ALLOC
 18 .text.libgcc  0000000e  000001ac  000001ac  00000240  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
   8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
   c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  28:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  34:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  3c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  64:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  74:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  80:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  84:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 02       	muls	r16, r17
  90:	80 00       	.word	0x0080	; ????

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e1       	ldi	r29, 0x10	; 16
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	19 c0       	rjmp	.+50     	; 0xd8 <__do_clear_bss+0x8>
  a6:	b7 91       	elpm	r27, Z+
  a8:	a7 91       	elpm	r26, Z+
  aa:	37 91       	elpm	r19, Z+
  ac:	27 91       	elpm	r18, Z+
  ae:	07 91       	elpm	r16, Z+
  b0:	07 fd       	sbrc	r16, 7
  b2:	0e c0       	rjmp	.+28     	; 0xd0 <__do_clear_bss>
  b4:	97 91       	elpm	r25, Z+
  b6:	87 91       	elpm	r24, Z+
  b8:	ef 01       	movw	r28, r30
  ba:	f9 2f       	mov	r31, r25
  bc:	e8 2f       	mov	r30, r24
  be:	0b bf       	out	0x3b, r16	; 59
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x22>
  ca:	fe 01       	movw	r30, r28
  cc:	1b be       	out	0x3b, r1	; 59
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_clear_bss+0x8>

000000d0 <__do_clear_bss>:
  d0:	1d 92       	st	X+, r1
  d2:	a2 17       	cp	r26, r18
  d4:	b3 07       	cpc	r27, r19
  d6:	e1 f7       	brne	.-8      	; 0xd0 <__do_clear_bss>
  d8:	e1 39       	cpi	r30, 0x91	; 145
  da:	f4 07       	cpc	r31, r20
  dc:	21 f7       	brne	.-56     	; 0xa6 <__do_copy_data+0x8>
  de:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  e2:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

Disassembly of section .text:

000001ba <__bad_interrupt>:
 1ba:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

0000018e <wait>:
#include <avr/io.h>

int numberIndex = 0;

void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	08 c0       	rjmp	.+16     	; 0x1a4 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	ef ec       	ldi	r30, 0xCF	; 207
 196:	f7 e0       	ldi	r31, 0x07	; 7
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <wait+0xa>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <wait+0x10>
 19e:	00 00       	nop
 1a0:	2f 5f       	subi	r18, 0xFF	; 255
 1a2:	3f 4f       	sbci	r19, 0xFF	; 255
 1a4:	28 17       	cp	r18, r24
 1a6:	39 07       	cpc	r19, r25
 1a8:	ac f3       	brlt	.-22     	; 0x194 <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 1aa:	08 95       	ret

Disassembly of section .text.display:

0000016a <display>:
	0b01101111, // 9
	0b01111001, // E
};

void display(int digit) {
	if (digit > 10) {
 16a:	8b 30       	cpi	r24, 0x0B	; 11
 16c:	91 05       	cpc	r25, r1
 16e:	1c f0       	brlt	.+6      	; 0x176 <display+0xc>
		PORTC = NUMBERS[10];
 170:	89 e7       	ldi	r24, 0x79	; 121
 172:	85 bb       	out	0x15, r24	; 21
 174:	08 95       	ret
		} else {
		PORTC = NUMBERS[digit];
 176:	09 2e       	mov	r0, r25
 178:	00 0c       	add	r0, r0
 17a:	aa 0b       	sbc	r26, r26
 17c:	86 51       	subi	r24, 0x16	; 22
 17e:	9f 4f       	sbci	r25, 0xFF	; 255
 180:	af 4f       	sbci	r26, 0xFF	; 255
 182:	fc 01       	movw	r30, r24
 184:	5a 2f       	mov	r21, r26
 186:	0e 94 d6 00 	call	0x1ac	; 0x1ac <__xload_1>
 18a:	65 bb       	out	0x15, r22	; 21
 18c:	08 95       	ret

Disassembly of section .text.main:

000000f6 <main>:
	}
}

int main(void)
{
	DDRD = 0b11111100;		// PORTD(7:3) output, PORTD(2:0) input
  f6:	8c ef       	ldi	r24, 0xFC	; 252
  f8:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	84 bb       	out	0x14, r24	; 20
	
	while (1) {		
		if (PIND == 0x01) {
  fe:	80 b3       	in	r24, 0x10	; 16
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	51 f4       	brne	.+20     	; 0x118 <main+0x22>
			numberIndex++;
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 116:	14 c0       	rjmp	.+40     	; 0x140 <main+0x4a>
			} else if (PIND == 0x02) {
 118:	80 b3       	in	r24, 0x10	; 16
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	51 f4       	brne	.+20     	; 0x132 <main+0x3c>
			numberIndex--;
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 130:	07 c0       	rjmp	.+14     	; 0x140 <main+0x4a>
			} else if (PIND == 0x03) {
 132:	80 b3       	in	r24, 0x10	; 16
 134:	83 30       	cpi	r24, 0x03	; 3
 136:	21 f4       	brne	.+8      	; 0x140 <main+0x4a>
			numberIndex = 0;
 138:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		if (numberIndex < 0) numberIndex = 0;
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 144:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 148:	99 23       	and	r25, r25
 14a:	24 f4       	brge	.+8      	; 0x154 <main+0x5e>
 14c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 150:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		display(numberIndex);
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 158:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 15c:	0e 94 b5 00 	call	0x16a	; 0x16a <display>
		wait(500);
 160:	84 ef       	ldi	r24, 0xF4	; 244
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 c7 00 	call	0x18e	; 0x18e <wait>
	}
 168:	ca cf       	rjmp	.-108    	; 0xfe <main+0x8>

Disassembly of section .text.libgcc:

000001ac <__xload_1>:
 1ac:	57 fd       	sbrc	r21, 7
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <__xload_1+0xa>
 1b0:	5b bf       	out	0x3b, r21	; 59
 1b2:	67 91       	elpm	r22, Z+
 1b4:	08 95       	ret
 1b6:	60 81       	ld	r22, Z
 1b8:	08 95       	ret
