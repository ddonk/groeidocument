
7segfun.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d2  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000201  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b4f  00000000  00000000  00000229  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000838  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002c6  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00001878  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a0  00000000  00000000  00001b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000015a  0000015a  000001ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  0000013c  0000013c  000001b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    00000052  000000ea  000000ea  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .bss.numberIndex 00000002  00800100  00800100  000001d2  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
   8:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
   c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  10:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  14:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  18:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  1c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  20:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  24:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  28:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  2c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  30:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  34:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  38:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  3c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  40:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  44:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  48:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  4c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  50:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  54:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  58:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  5c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  60:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  64:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  68:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  6c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  70:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  74:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  78:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  7c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  80:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  84:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  88:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 02       	muls	r16, r17
  90:	80 00       	.word	0x0080	; ????

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e1       	ldi	r29, 0x10	; 16
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	19 c0       	rjmp	.+50     	; 0xd8 <__do_clear_bss+0x8>
  a6:	b7 91       	elpm	r27, Z+
  a8:	a7 91       	elpm	r26, Z+
  aa:	37 91       	elpm	r19, Z+
  ac:	27 91       	elpm	r18, Z+
  ae:	07 91       	elpm	r16, Z+
  b0:	07 fd       	sbrc	r16, 7
  b2:	0e c0       	rjmp	.+28     	; 0xd0 <__do_clear_bss>
  b4:	97 91       	elpm	r25, Z+
  b6:	87 91       	elpm	r24, Z+
  b8:	ef 01       	movw	r28, r30
  ba:	f9 2f       	mov	r31, r25
  bc:	e8 2f       	mov	r30, r24
  be:	0b bf       	out	0x3b, r16	; 59
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x22>
  ca:	fe 01       	movw	r30, r28
  cc:	1b be       	out	0x3b, r1	; 59
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_clear_bss+0x8>

000000d0 <__do_clear_bss>:
  d0:	1d 92       	st	X+, r1
  d2:	a2 17       	cp	r26, r18
  d4:	b3 07       	cpc	r27, r19
  d6:	e1 f7       	brne	.-8      	; 0xd0 <__do_clear_bss>
  d8:	e1 39       	cpi	r30, 0x91	; 145
  da:	f4 07       	cpc	r31, r20
  dc:	21 f7       	brne	.-56     	; 0xa6 <__do_copy_data+0x8>
  de:	0e 94 75 00 	call	0xea	; 0xea <_etext>
  e2:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

Disassembly of section .text:

0000015a <__bad_interrupt>:
 15a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

0000013c <wait>:
#include <avr/io.h>

int numberIndex = 0;

void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	08 c0       	rjmp	.+16     	; 0x152 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	ef ec       	ldi	r30, 0xCF	; 207
 144:	f7 e0       	ldi	r31, 0x07	; 7
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <wait+0xa>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <wait+0x10>
 14c:	00 00       	nop
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	28 17       	cp	r18, r24
 154:	39 07       	cpc	r19, r25
 156:	ac f3       	brlt	.-22     	; 0x142 <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 158:	08 95       	ret

Disassembly of section .text.main:

000000ea <main>:

int main(void)
{
	DDRD = 0b11111100;		// PORTD(7:3) output, PORTD(2:0) input
  ea:	8c ef       	ldi	r24, 0xFC	; 252
  ec:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	84 bb       	out	0x14, r24	; 20
	
	unsigned char segvalue = 0b00000001;
  f2:	c1 e0       	ldi	r28, 0x01	; 1
	while (1) {
		numberIndex++;
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 102:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(numberIndex > 7) {
 106:	08 97       	sbiw	r24, 0x08	; 8
 108:	94 f0       	brlt	.+36     	; 0x12e <main+0x44>
			PORTC = 0b11111111;
 10a:	cf ef       	ldi	r28, 0xFF	; 255
 10c:	c5 bb       	out	0x15, r28	; 21
			wait(500);
 10e:	84 ef       	ldi	r24, 0xF4	; 244
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 9e 00 	call	0x13c	; 0x13c <wait>
			PORTC = 0b00000000;
 116:	15 ba       	out	0x15, r1	; 21
			wait(500);
 118:	84 ef       	ldi	r24, 0xF4	; 244
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	0e 94 9e 00 	call	0x13c	; 0x13c <wait>
			PORTC = 0b11111111;
 120:	c5 bb       	out	0x15, r28	; 21
			numberIndex = 0;
 122:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 126:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			segvalue = 0b00000001;
 12a:	c1 e0       	ldi	r28, 0x01	; 1
 12c:	02 c0       	rjmp	.+4      	; 0x132 <main+0x48>
		} else {
			segvalue = segvalue << 1;
 12e:	cc 0f       	add	r28, r28
			PORTC = segvalue;
 130:	c5 bb       	out	0x15, r28	; 21
		}
		wait(500);
 132:	84 ef       	ldi	r24, 0xF4	; 244
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 9e 00 	call	0x13c	; 0x13c <wait>
	}
 13a:	dc cf       	rjmp	.-72     	; 0xf4 <main+0xa>
