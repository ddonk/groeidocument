
Interupts1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022c  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000025b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a36  00000000  00000000  0000028b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000078c  00000000  00000000  00000cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000027b  00000000  00000000  0000144d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000094  00000000  00000000  000016c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000fa  00000000  00000000  000019d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001b4  000001b4  00000228  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001af4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.__vector_1 00000056  00000144  00000144  000001b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_2 0000005a  000000ea  000000ea  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000001a  0000019a  0000019a  0000020e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.ledIndex 00000002  00800100  00800100  0000022c  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_1>
   8:	0c 94 75 00 	jmp	0xea	; 0xea <_etext>
   c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  10:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  14:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  18:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  1c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  20:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  24:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  28:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  2c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  30:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  34:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  3c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  40:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  48:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  4c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  50:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  54:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  58:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  5c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  60:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  64:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  68:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  6c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  70:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  74:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  78:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  7c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  80:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  84:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  88:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 02       	muls	r16, r17
  90:	80 00       	.word	0x0080	; ????

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e1       	ldi	r29, 0x10	; 16
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	19 c0       	rjmp	.+50     	; 0xd8 <__do_clear_bss+0x8>
  a6:	b7 91       	elpm	r27, Z+
  a8:	a7 91       	elpm	r26, Z+
  aa:	37 91       	elpm	r19, Z+
  ac:	27 91       	elpm	r18, Z+
  ae:	07 91       	elpm	r16, Z+
  b0:	07 fd       	sbrc	r16, 7
  b2:	0e c0       	rjmp	.+28     	; 0xd0 <__do_clear_bss>
  b4:	97 91       	elpm	r25, Z+
  b6:	87 91       	elpm	r24, Z+
  b8:	ef 01       	movw	r28, r30
  ba:	f9 2f       	mov	r31, r25
  bc:	e8 2f       	mov	r30, r24
  be:	0b bf       	out	0x3b, r16	; 59
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x22>
  ca:	fe 01       	movw	r30, r28
  cc:	1b be       	out	0x3b, r1	; 59
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_clear_bss+0x8>

000000d0 <__do_clear_bss>:
  d0:	1d 92       	st	X+, r1
  d2:	a2 17       	cp	r26, r18
  d4:	b3 07       	cpc	r27, r19
  d6:	e1 f7       	brne	.-8      	; 0xd0 <__do_clear_bss>
  d8:	e1 39       	cpi	r30, 0x91	; 145
  da:	f4 07       	cpc	r31, r20
  dc:	21 f7       	brne	.-56     	; 0xa6 <__do_copy_data+0x8>
  de:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  e2:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

Disassembly of section .text:

000001b4 <__bad_interrupt>:
 1b4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_1:

00000144 <__vector_1>:
#include <util/delay.h>
#include <avr/interrupt.h>

int ledIndex = 0;

ISR( INT0_vect ) {
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
	ledIndex--;
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 162:	01 97       	sbiw	r24, 0x01	; 1
	ledIndex = (ledIndex < 0 ? 7 : ledIndex);
 164:	12 f4       	brpl	.+4      	; 0x16a <__vector_1+0x26>
 166:	87 e0       	ldi	r24, 0x07	; 7
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTC = (1<<ledIndex);
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	a9 01       	movw	r20, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <__vector_1+0x3a>
 17a:	44 0f       	add	r20, r20
 17c:	55 1f       	adc	r21, r21
 17e:	8a 95       	dec	r24
 180:	e2 f7       	brpl	.-8      	; 0x17a <__vector_1+0x36>
 182:	45 bb       	out	0x15, r20	; 21
}
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	5f 91       	pop	r21
 18a:	4f 91       	pop	r20
 18c:	3f 91       	pop	r19
 18e:	2f 91       	pop	r18
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

Disassembly of section .text.__vector_2:

000000ea <__vector_2>:


ISR( INT1_vect ) {
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	4f 93       	push	r20
  fa:	5f 93       	push	r21
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
	ledIndex++;
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 104:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 108:	01 96       	adiw	r24, 0x01	; 1
	//if i is greater then 7
	ledIndex = (ledIndex > 7 ? 0 : ledIndex);
 10a:	88 30       	cpi	r24, 0x08	; 8
 10c:	91 05       	cpc	r25, r1
 10e:	14 f0       	brlt	.+4      	; 0x114 <__vector_2+0x2a>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 118:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTC = (1<<ledIndex);
 11c:	21 e0       	ldi	r18, 0x01	; 1
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	a9 01       	movw	r20, r18
 122:	02 c0       	rjmp	.+4      	; 0x128 <__vector_2+0x3e>
 124:	44 0f       	add	r20, r20
 126:	55 1f       	adc	r21, r21
 128:	8a 95       	dec	r24
 12a:	e2 f7       	brpl	.-8      	; 0x124 <__vector_2+0x3a>
 12c:	45 bb       	out	0x15, r20	; 21
}
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	5f 91       	pop	r21
 134:	4f 91       	pop	r20
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

Disassembly of section .text.main:

0000019a <main>:


int main(void)
{
	DDRC = 0xFF; //Setting row to output
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x00;
 19e:	11 ba       	out	0x11, r1	; 17
	
	EICRA |= 0x0B;			// INT1 falling edge, INT0 rising edge
 1a0:	ea e6       	ldi	r30, 0x6A	; 106
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	8b 60       	ori	r24, 0x0B	; 11
 1a8:	80 83       	st	Z, r24
	EIMSK |= 0x03;			// Enable INT1 & INT0
 1aa:	89 b7       	in	r24, 0x39	; 57
 1ac:	83 60       	ori	r24, 0x03	; 3
 1ae:	89 bf       	out	0x39, r24	; 57

	sei();
 1b0:	78 94       	sei
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <main+0x18>
