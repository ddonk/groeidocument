
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021c  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000070  00000000  00000000  0000024b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000105b  00000000  00000000  000002bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000009a6  00000000  00000000  00001316  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004cf  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d0  00000000  00000000  0000218c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000298  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000028a  00000000  00000000  000024f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  0000277e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001a4  000001a4  00000218  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000027d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_strobe_lcd_e 00000026  00000116  00000116  0000018a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.init    0000003e  000000aa  000000aa  0000011e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_write_data 00000024  0000013c  0000013c  000001b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.display_text 0000002e  000000e8  000000e8  0000015c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.wait    0000001e  00000160  00000160  000001d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .progmemx.data 00000005  000000a4  000000a4  00000118  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 19 .text.main    00000018  0000017e  0000017e  000001f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.libgcc  0000000e  00000196  00000196  0000020a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
   8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
   c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  68:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  6c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  70:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  74:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  78:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  7c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  80:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  84:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  88:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

000001a4 <__bad_interrupt>:
 1a4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_strobe_lcd_e:

00000116 <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
void lcd_strobe_lcd_e(void) {
	PORTC |= (1<<LCD_E);	// E high
 116:	85 b3       	in	r24, 0x15	; 21
 118:	88 60       	ori	r24, 0x08	; 8
 11a:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	8f ec       	ldi	r24, 0xCF	; 207
 11e:	97 e0       	ldi	r25, 0x07	; 7
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <lcd_strobe_lcd_e+0xa>
 124:	00 c0       	rjmp	.+0      	; 0x126 <lcd_strobe_lcd_e+0x10>
 126:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTC &= ~(1<<LCD_E);  	// E low
 128:	85 b3       	in	r24, 0x15	; 21
 12a:	87 7f       	andi	r24, 0xF7	; 247
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	8f ec       	ldi	r24, 0xCF	; 207
 130:	97 e0       	ldi	r25, 0x07	; 7
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_strobe_lcd_e+0x1c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_strobe_lcd_e+0x22>
 138:	00 00       	nop
 13a:	08 95       	ret

Disassembly of section .text.init:

000000aa <init>:

void set_cursor(int position) {
	lcd_write_cmd((position * 0x1) + 0x80);
	_delay_ms(2);
}
void init() {
  aa:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  b0:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
  b2:	c0 e2       	ldi	r28, 0x20	; 32
  b4:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
  b6:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
  ba:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
  bc:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_strobe_lcd_e>
	PORTC = 0x80;
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
  c4:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
  c8:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
  ca:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_strobe_lcd_e>
	PORTC = 0xF0;
  ce:	80 ef       	ldi	r24, 0xF0	; 240
  d0:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
  d2:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
  d6:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
  d8:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_strobe_lcd_e>
	PORTC = 0x60;
  dc:	80 e6       	ldi	r24, 0x60	; 96
  de:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
  e0:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_strobe_lcd_e>

}
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

Disassembly of section .text.lcd_write_data:

0000013c <lcd_write_data>:
	for(;*str; str++){
		lcd_write_data(*str);
	}
}

void lcd_write_data(unsigned char byte) {
 13c:	cf 93       	push	r28
 13e:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 140:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 142:	85 b3       	in	r24, 0x15	; 21
 144:	84 60       	ori	r24, 0x04	; 4
 146:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 148:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 14c:	c2 95       	swap	r28
 14e:	c0 7f       	andi	r28, 0xF0	; 240
 150:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
 152:	85 b3       	in	r24, 0x15	; 21
 154:	84 60       	ori	r24, 0x04	; 4
 156:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 158:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_strobe_lcd_e>
}
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

Disassembly of section .text.display_text:

000000e8 <display_text>:
	lcd_strobe_lcd_e();

}


void display_text(const char *str) {
  e8:	cf 92       	push	r12
  ea:	df 92       	push	r13
  ec:	ef 92       	push	r14
  ee:	6b 01       	movw	r12, r22
  f0:	e8 2e       	mov	r14, r24
	for(;*str; str++){
  f2:	07 c0       	rjmp	.+14     	; 0x102 <display_text+0x1a>
		lcd_write_data(*str);
  f4:	86 2f       	mov	r24, r22
  f6:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_write_data>

}


void display_text(const char *str) {
	for(;*str; str++){
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	c8 1a       	sub	r12, r24
  fe:	d8 0a       	sbc	r13, r24
 100:	e8 0a       	sbc	r14, r24
 102:	f6 01       	movw	r30, r12
 104:	5e 2d       	mov	r21, r14
 106:	0e 94 cb 00 	call	0x196	; 0x196 <__xload_1>
 10a:	61 11       	cpse	r22, r1
 10c:	f3 cf       	rjmp	.-26     	; 0xf4 <display_text+0xc>
		lcd_write_data(*str);
	}
}
 10e:	ef 90       	pop	r14
 110:	df 90       	pop	r13
 112:	cf 90       	pop	r12
 114:	08 95       	ret

Disassembly of section .text.wait:

00000160 <wait>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include "LCDHelper/LCDHelper.h"

void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	08 c0       	rjmp	.+16     	; 0x176 <wait+0x16>
 166:	ef ec       	ldi	r30, 0xCF	; 207
 168:	f7 e0       	ldi	r31, 0x07	; 7
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <wait+0xa>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <wait+0x10>
 170:	00 00       	nop
 172:	2f 5f       	subi	r18, 0xFF	; 255
 174:	3f 4f       	sbci	r19, 0xFF	; 255
 176:	28 17       	cp	r18, r24
 178:	39 07       	cpc	r19, r25
 17a:	ac f3       	brlt	.-22     	; 0x166 <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 17c:	08 95       	ret

Disassembly of section .text.main:

0000017e <main>:

int main(void)
{
	init();
 17e:	0e 94 55 00 	call	0xaa	; 0xaa <init>
	const char* result = "test";
	display_text(result);
 182:	64 ea       	ldi	r22, 0xA4	; 164
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 74 00 	call	0xe8	; 0xe8 <display_text>
	while (1) {


		wait(1);
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 b0 00 	call	0x160	; 0x160 <wait>
 194:	fb cf       	rjmp	.-10     	; 0x18c <main+0xe>

Disassembly of section .text.libgcc:

00000196 <__xload_1>:
 196:	57 fd       	sbrc	r21, 7
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <__xload_1+0xa>
 19a:	5b bf       	out	0x3b, r21	; 59
 19c:	67 91       	elpm	r22, Z+
 19e:	08 95       	ret
 1a0:	60 81       	ld	r22, Z
 1a2:	08 95       	ret
